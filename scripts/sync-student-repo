#!/usr/bin/env python3

# Synchronizes files to the student repo.
# - Get all files under git control.
# - Remove files from BLACKLIST
# - From the files remove, re-add those in WHITELIST

BLACKLIST = ["src/compilers/", "src/parsers/"]
WHITELIST: list[str] = ["src/parsers/common.py", "src/parsers/lang_simple"]

from shell import *
import argparse
import shutil

TOP_DIR = abspath(pjoin(THIS_DIR, ".."))
cd(TOP_DIR)

STUD_REPO = pjoin(TOP_DIR, "../compiler-construction-student")

_debug = False
def debug(s: str):
    if _debug:
        print(f'[DEBUG] {s}')

def include(f: str):
    if f.startswith('./'):
        f = f[2:]
    for b in BLACKLIST:
        if f.startswith(b):
            for w in WHITELIST:
                if f.startswith(w):
                    return True
            return False
    return True

def copy(f: str, tmpDir: str):
    if not exists(f):
        abort(f'File/directory {f} does not exist. Did it move but was not committed?')
    if not isFile(f):
        return
    target = pjoin(tmpDir, f)
    d = dirname(target)
    mkdirs(d)
    shutil.copy(f, target)

def fixReadme(d: str):
    prefix = '**NOTE: do not pass to students'
    studentWarning = '**NOTE: this is the student repository. ' \
        'It is a partial copy of the main repository.**'
    studentBadge = '[![Python CI](https://github.com/HSO-swehr/compiler-construction-student/actions/workflows/github-action-test-python.yml/badge.svg)](https://github.com/HSO-swehr/compiler-construction-student/actions/workflows/github-action-test-python.yml)'
    newLines: list[str] = []
    p = pjoin(d, 'README.md')
    found = 0
    for l in open(p).readlines():
        if l.startswith(prefix):
            l = studentWarning + '\n'
            found += 1
        elif l.startswith('[![Python CI]'):
            l = studentBadge + '\n'
            found += 1
        newLines.append(l)
    if found != 2:
        raise ValueError(f'No warning line and/or no badge line found in {p}')
    open(p, 'w').writelines(newLines)

def main():
    files = run('git ls-files', captureStdout=splitLines).stdout
    inc: list[str] = []
    ex: list[str] = []
    with tempDir(suffix='compiler-construction') as tmpDir:
        for f in files:
            if include(f):
                debug(f'Copying {f} to {tmpDir}')
                copy(f, tmpDir)
                inc.append(f)
            else:
                ex.append(f)
        print(f"Copied {len(inc)} items, excluded {len(ex)}")
        print(f"Exluded items:")
        for e in ex:
            print(e)
        fixReadme(tmpDir)
        rsyncExcludes = ['/.git', '/.pytest_cache', '/student', '/.test_cache', '/.venv',
                         '__pycache__']
        rsyncExOpts = ' '.join([f'--exclude {x}' for x in rsyncExcludes])
        print()
        print(f'Syncing to {STUD_REPO} via rsync ...')
        res = run(f'rsync --checksum --archive --verbose --delete {rsyncExOpts} {tmpDir}/ {STUD_REPO}',
                  captureStdout=splitLines)
        for l in res.stdout:
            l = l.rstrip()
            if not isDir(l):
                print(l)

def parseArgs():
    parser = argparse.ArgumentParser(description=f'Sync student repo')
    parser.add_argument('--debug', action='store_true', default=False,
                        help='Enable debugging output')
    return parser.parse_args()

if __name__ == '__main__':
    args = parseArgs()
    _debug = args.debug
    main()

